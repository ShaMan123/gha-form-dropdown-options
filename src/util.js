import fs from 'fs';
import { DEFAULT_SCHEMA, dump, load, types } from 'js-yaml';

// configure null to be stringified to ''
types.null.defaultStyle = 'empty';
const schema = DEFAULT_SCHEMA;

const RE = '${...}';

export function parseYAML(input) {
	return load(input, { schema });
}

export function stringifyYAML(data) {
	return dump(data, { schema });
}

export function readYAMLFile(file) {
	return parseYAML(fs.readFileSync(file).toString());
}

export function writeYAMLFile(file, data) {
	fs.writeFileSync(file, stringifyYAML(data));
}

function hasDropdownEmptyOptions(dropdown) {
	const {
		attributes: { options }
	} = dropdown;
	return (
		!options ||
		!options.length ||
		(Array.isArray(options) && options.every((option) => !option))
	);
}

function hasDropdownIdPrefix(dropdown, strategy) {
	return dropdown.id.startsWith(strategy.prefix);
}

export function isDynamicDropdown(dropdown, strategy) {
	switch (strategy.strategy) {
		case 'id-prefix':
			return hasDropdownIdPrefix(dropdown, strategy);
		case 'empty-options':
			return hasDropdownEmptyOptions(dropdown);
		case 'mixed':
			return (
				hasDropdownIdPrefix(dropdown, strategy) ||
				hasDropdownEmptyOptions(dropdown)
			);
		default:
			throw new Error(`Unknown strategy '${strategy.strategy}'`);
	}
}

function readYAML(file, template, strategy) {
	if (!template) {
		return readYAMLFile(file);
	}
	const templateContent = readYAMLFile(template);
	if (fs.existsSync(file)) {
		// avoid overriding existing options by prefilling template with actual form data
		// avoid prefilling static dropdown (with populated options) in case the template has been updated
		const content = readYAMLFile(file);
		templateContent.body.forEach((entry, index) => {
			if (entry.type !== 'dropdown') return;
			if (isDynamicDropdown(entry, strategy)) {
				templateContent.body[index].attributes.options =
					content.body[index].attributes.options;
			}
		});
		return templateContent;
	}
	return templateContent;
}

function findDropdown(content, dropdownId) {
	return content.body.find(
		(entry) => entry.id === dropdownId && entry.type === 'dropdown'
	);
}

export function writeYAML({
	form,
	template,
	dropdown: dropdownId,
	attributes,
	strategy
}) {
	const content = readYAML(form, template, strategy);
	const found = findDropdown(content, dropdownId);
	const templateContent = !!template && readYAMLFile(template);
	if (!found) {
		throw new Error(
			`Dropdown '${dropdownId}' not found.\nShould be one of ${content.body
				.filter((entry) => entry.type === 'dropdown')
				.map(({ id }) => `'${id}'`)
				.join(', ')}.`
		);
	} else if (
		templateContent &&
		!isDynamicDropdown(findDropdown(templateContent, dropdownId), strategy)
	) {
		throw new Error(
			`Conflicting Strategy\nTrying to update a static dropdown\n${JSON.stringify(
				{ dropdown: findDropdown(templateContent, dropdownId), strategy },
				null,
				2
			).replace(/"/gm, '')}`
		);
	}
	const compatAttributes = {};
	for (const key in attributes) {
		let value = attributes[key];
		const templateValue = found.attributes[key];
		if (!value) continue;
		if (template) {
			if (typeof templateValue === 'string') {
				value = value.replace(RE, templateValue);
			} else if (Array.isArray(value) && Array.isArray(templateValue)) {
				const out = [];
				value.forEach((entry) =>
					entry === RE
						? out.push(...templateValue.filter((opt) => !!opt))
						: out.push(entry)
				);
				value = out;
			}
		}
		compatAttributes[key] = value;
	}
	found.attributes = { ...found.attributes, ...compatAttributes };
	let out = stringifyYAML(content);
	if (template) {
		const HEADER = `
#
# This file was generated by the action ShaMan123/gha-form-dropdown-options using the template '${template}' 
# Update this file by editing '${template}'
#
`;
		out = `${HEADER}\n\n${out}`;
	}
	fs.writeFileSync(form, out);
	return content;
}
